    ; REQUIRE: FATAL
Allocate_number_EXPEVA:
    PUSH BP
    ANDI R1, R1, 0x00
    ; n_sp += 2
    LW   R3, R1, 0x09
    ADDI R3, R3, 0x02
    ; if n_sp > 0x50 throw
    ADDI R0, R1, 0x50
    SLT  R0, R0, R3
    BEQ  R0, R1, ok_Allocate_number_EXPEVA
    JMP  FATAL
ok_Allocate_number_EXPEVA:
    SW   R3, R1, 0x09
    RET
Free_number_EXPEVA:
    PUSH BP
    ANDI R1, R1, 0x00
    ; n_sp -= 2
    LW   R3, R1, 0x09
    ADDI R3, R3, 0xfe
    ; if n_sp < 0x10 throw
    ADDI R0, R1, 0x10
    SLT  R0, R3, R0
    BEQ  R0, R1, ok_Free_number_EXPEVA
    JMP  FATAL
ok_Free_number_EXPEVA:
    SW   R3, R1, 0x09
    RET
Push_operator_EXPEVA:
    PUSH BP
    ANDI R1, R1, 0x00
    LW   R2, R1, 0xfe
    LW   R0, R2, 0x03
    LW   R3, R1, 0x0a
    ; *o_sp = arg[0]
    SW   R0, R3, 0x00
    ; o_sp += 1
    ADDI R3, R3, 0x01
    ; if o_sp > 0x80 throw
    ADDI R0, R1, 0x80
    SLT  R0, R0, R3
    BEQ  R0, R1, ok_Push_operator_EXPEVA
    JMP  FATAL
ok_Push_operator_EXPEVA:
    SW   R3, R1, 0x0a
    RET
Pop_operator_EXPEVA:
    PUSH BP
    ANDI R1, R1, 0x00
    ; o_sp -= 1
    LW   R3, R1, 0x0a
    ADDI R3, R3, 0xff
    ; if o_sp < 0x50 throw
    ADDI R0, R1, 0x50
    SLT  R0, R3, R0
    BEQ  R0, R1, ok_Pop_operator_EXPEVA
    JMP  FATAL
ok_Pop_operator_EXPEVA:
    SW   R3, R1, 0x0a
    LW   R0, R3, 0x00
    RET
