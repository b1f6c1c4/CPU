    ANDI R0, R0, 0x00   ;
    ADDI R0, R0, 0x58   ; R0 = 0x58
    ANDI R1, R1, 0x00   ;
    ADDI R1, R1, 0x01   ; R1 = 0x01
add:
    ANDI R3, R3, 0x00   ;
    ADDI R2, R0, 0xC2   ; R2 + c = R0 + 0xC2
    SW   R2, R3, 0x20   ; MEM[0x20] = R2
    ANDI R2, R2, 0x00   ;
    ADDC R3, R1, R3     ; R3 = R1 + c
    SW   R3, R2, 0x21   ; MEM[0x21] = R3
minus:
    ANDI R2, R2, 0x00   ;
    ADDI R2, R2, 0xC2   ; R2 = 0xC2
    ANDI R3, R3, 0x00   ;
    SUB  R2, R2, R0     ; R2 + c -= R0
    SW   R2, R3, 0x22   ; MEM[0x22] = R2
    ANDI R2, R2, 0x00   ;
    SUBC R3, R3, R1     ; R3 -= R1 + c
    SW   R3, R2, 0x23   ; MEM[0x23] = R3
and:
    ANDI R2, R2, 0x00   ;
    ANDI R3, R0, 0xC3   ; R3 = R0 & 0xC2
    SW   R3, R2, 0x24   ; MEM[0x24] = R3
    ANDI R3, R1, 0x00   ; R3 = R1 & 0x00
    SW   R3, R2, 0x25   ; MEM[0x25] = R3
or:
    ANDI R2, R2, 0x00   ;
    ORI R3, R0, 0xC2    ; R3 = R0 | 0xC2
    SW   R3, R2, 0x26   ; MEM[0x26] = R3
    ORI R3, R1, 0x00    ; R3 = R1 | 0x00
    SW   R3, R2, 0x27   ; MEM[0x27] = R3
lt:
    ANDI R2, R2, 0x00   ;
    ANDI R3, R3, 0x00   ;
    SLT  R3, R1, R3     ; R3 = (R1 < 0x00)
    BNE  R3, R2, lt_ge  ; if (R3) goto lt_ge
    ANDI R3, R3, 0x00   ;
    SLT  R3, R3, R1     ; R3 = (0x00 < R1)
    BNE  R3, R2, lt_lt  ; if (R3) goto lt_lt
    ANDI R3, R3, 0x00   ;
    ADDI R3, R3, 0xC2   ;
    SLT  R3, R3, R0     ; R3 = (0xC2 < R0)
    BEQ  R3, R2, lt_ge  ; if (!(R3)) goto lt_ge
lt_lt:
    SW   R2, R2, 0x29   ; MEM[0x29] = 0
    ADDI R3, R2, 0x01   ;
    SW   R3, R2, 0x28   ; MEM[0x28] = 1
    JMP  done           ; goto done
lt_ge:
    SW   R2, R2, 0x29   ; MEM[0x29] = 0
    SW   R2, R2, 0x28   ; MEM[0x28] = 0
done:
    ANDI R2, R2, 0x00   ; NOP
