    ;include lib/EXPEVA.mips
    ;include lib/Ascii.mips
    ;include lib/ReadKey.mips
    INIT
    CALL Init_EXPEVA
    PUSH R0
main:
    PUSH R0
    CALL Top_EXPEVA
    CALL SendNumber
    ANDI R1, R1, 0x00
    ADDI R0, R1, 0x0d   ; '\r'
    PUSH R0
    CALL WriteExternal
    POP  R0
    ANDI R1, R1, 0x00
    ADDI R0, R1, 0x0a   ; '\n'
    PUSH R0
    CALL WriteExternal
    POP  R0
    POP  R0
    SW   R0, R1, 0x00
    ANDI R1, R1, 0x00
    POP  R0
    SW   R0, R1, 0x01
    CALL ReadExternal
    ANDI R1, R1, 0x00
    ADDI R2, R1, 0x0a   ; LF
    BNE  R0, R2, not_ok
    PUSH R0
    JMP  op_OK
not_ok:
    ADDI R2, R1, 0x5e   ; ^
    BNE  R0, R2, not_xor
    PUSH R0
    JMP  op_BitwiseXor
not_xor:
    ADDI R2, R1, 0x7c   ; |
    BNE  R0, R2, not_or
    PUSH R0
    JMP  op_BitwiseOr
not_or:
    ADDI R2, R1, 0x7e   ; ~
    BNE  R0, R2, not_not
    PUSH R0
    JMP  op_BitwiseNot
not_not:
    ADDI R2, R1, 0x20
    ADDI R0, R0, 0xe0
    SLT  R2, R0, R2
    BNE  R2, R1, valid
    PUSH R0
    JMP  main
valid:
    PUSH R0
    ADDPC
    JMP  main           ; Space
    JMP  main           ; !
    JMP  main           ; "
    JMP  main           ; #
    JMP  main           ; $
    JMP  op_Reminder    ; %
    JMP  op_BitwiseAnd  ; &
    JMP  main           ; '
    JMP  op_LeftParenthesis; (
    JMP  op_RightParenthesis; )
    JMP  op_Multiply    ; *
    JMP  op_Plus        ; +
    JMP  main           ; ,
    JMP  op_Minus       ; -
    JMP  main           ; .
    JMP  op_Divide      ; /
    JMP  nm_0           ; 0
    JMP  nm_1           ; 1
    JMP  nm_2           ; 2
    JMP  nm_3           ; 3
    JMP  nm_4           ; 4
    JMP  nm_5           ; 5
    JMP  nm_6           ; 6
    JMP  nm_7           ; 7
    JMP  nm_8           ; 8
    JMP  nm_9           ; 9
    JMP  main           ; :
    JMP  main           ; ;
    JMP  op_LessThan    ; <
    JMP  op_EqualTo     ; =
    JMP  main           ; ;
    JMP  main           ; ?
nm_0:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 0
    PUSH R0
    CALL Digit_EXPEVA
    POP  R0
    JMP  main
nm_1:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 1
    PUSH R0
    CALL Digit_EXPEVA
    POP  R0
    JMP  main
nm_2:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 2
    PUSH R0
    CALL Digit_EXPEVA
    POP  R0
    JMP  main
nm_3:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 3
    PUSH R0
    CALL Digit_EXPEVA
    POP  R0
    JMP  main
nm_4:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 4
    PUSH R0
    CALL Digit_EXPEVA
    POP  R0
    JMP  main
nm_5:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 5
    PUSH R0
    CALL Digit_EXPEVA
    POP  R0
    JMP  main
nm_6:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 6
    PUSH R0
    CALL Digit_EXPEVA
    POP  R0
    JMP  main
nm_7:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 7
    PUSH R0
    CALL Digit_EXPEVA
    POP  R0
    JMP  main
nm_8:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 8
    PUSH R0
    CALL Digit_EXPEVA
    POP  R0
    JMP  main
nm_9:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 9
    PUSH R0
    CALL Digit_EXPEVA
    POP  R0
    JMP  main
op_Plus:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 0x02
    PUSH R0
    CALL Operator_EXPEVA
    POP  R0
    JMP  main
op_Minus:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 0x03
    PUSH R0
    CALL Operator_EXPEVA
    POP  R0
    JMP  main
op_Multiply:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 0x04
    PUSH R0
    CALL Operator_EXPEVA
    POP  R0
    JMP  main
op_Divide:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 0x05
    PUSH R0
    CALL Operator_EXPEVA
    POP  R0
    JMP  main
op_Reminder:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 0x06
    PUSH R0
    CALL Operator_EXPEVA
    POP  R0
    JMP  main
op_BitwiseNot:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 0x07
    PUSH R0
    CALL Operator_EXPEVA
    POP  R0
    JMP  main
op_BitwiseAnd:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 0x08
    PUSH R0
    CALL Operator_EXPEVA
    POP  R0
    JMP  main
op_BitwiseOr:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 0x09
    PUSH R0
    CALL Operator_EXPEVA
    POP  R0
    JMP  main
op_BitwiseXor:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 0x0a
    PUSH R0
    CALL Operator_EXPEVA
    POP  R0
    JMP  main
op_LeftParenthesis:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 0x0b
    PUSH R0
    CALL Operator_EXPEVA
    POP  R0
    JMP  main
op_RightParenthesis:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 0x0c
    PUSH R0
    CALL Operator_EXPEVA
    POP  R0
    JMP  main
op_LessThan:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 0x0d
    PUSH R0
    CALL Operator_EXPEVA
    POP  R0
    JMP  main
op_EqualTo:
    ANDI R1, R1, 0x00
    ADDI R1, R1, 0x0e
    PUSH R0
    CALL Operator_EXPEVA
    POP  R0
    JMP  main
op_OK:
    ANDI R1, R1, 0x00
    ADDI R0, R1, 0x0f
    PUSH R0
    CALL Operator_EXPEVA
    POP  R0
    JMP  main
ct_Back:
ct_Clear:
    CALL Back_EXPEVA
    JMP  main
